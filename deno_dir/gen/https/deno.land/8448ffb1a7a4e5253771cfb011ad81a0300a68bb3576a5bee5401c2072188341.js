import { eventHandlers } from "../module/client.ts";
import { structures } from "../structures/mod.ts";
import { ChannelTypes } from "../types/channel.ts";
import { cacheHandlers } from "./cache.ts";
export async function handleInternalChannelCreate(data) {
    if (data.t !== "CHANNEL_CREATE")
        return;
    const payload = data.d;
    const channel = await structures.createChannel(payload);
    await cacheHandlers.set("channels", channel.id, channel);
    if (channel.guildID) {
        const guild = await cacheHandlers.get("guilds", channel.guildID);
        guild?.channels.set(channel.id, channel);
    }
    eventHandlers.channelCreate?.(channel);
}
export async function handleInternalChannelDelete(data) {
    if (data.t !== "CHANNEL_DELETE")
        return;
    const payload = data.d;
    const cachedChannel = await cacheHandlers.get("channels", payload.id);
    if (!cachedChannel)
        return;
    if (cachedChannel.type === ChannelTypes.GUILD_VOICE && payload.guild_id) {
        const guild = await cacheHandlers.get("guilds", payload.guild_id);
        if (guild) {
            guild.voiceStates.forEach((vs, key) => {
                if (vs.channelID !== payload.id)
                    return;
                guild.voiceStates.delete(key);
                const member = guild.members.get(vs.userID);
                if (!member)
                    return;
                eventHandlers.voiceChannelLeave?.(member, vs.channelID);
            });
        }
        guild?.channels.delete(payload.id);
    }
    cacheHandlers.delete("channels", payload.id);
    cacheHandlers.forEach("messages", (message) => {
        if (message.channelID === payload.id) {
            cacheHandlers.delete("messages", message.id);
        }
    });
    eventHandlers.channelDelete?.(cachedChannel);
}
export async function handleInternalChannelUpdate(data) {
    if (data.t !== "CHANNEL_UPDATE")
        return;
    const payload = data.d;
    const cachedChannel = await cacheHandlers.get("channels", payload.id);
    const channel = await structures.createChannel(payload);
    cacheHandlers.set("channels", channel.id, channel);
    if (!cachedChannel)
        return;
    if (channel.guildID) {
        const guild = await cacheHandlers.get("guilds", channel.guildID);
        guild?.channels.set(channel.id, channel);
    }
    eventHandlers.channelUpdate?.(channel, cachedChannel);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBd0IsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUzQyxNQUFNLENBQUMsS0FBSyxVQUFVLDJCQUEyQixDQUFDLElBQW9CO0lBQ3BFLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxnQkFBZ0I7UUFBRSxPQUFPO0lBRXhDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUF5QixDQUFDO0lBQy9DLE1BQU0sT0FBTyxHQUFHLE1BQU0sVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RCxNQUFNLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFekQsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ25CLE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDMUM7SUFFRCxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsMkJBQTJCLENBQUMsSUFBb0I7SUFDcEUsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLGdCQUFnQjtRQUFFLE9BQU87SUFFeEMsTUFBTSxPQUFPLEdBQUcsSUFB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