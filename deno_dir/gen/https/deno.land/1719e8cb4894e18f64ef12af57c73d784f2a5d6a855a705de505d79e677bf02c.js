import { cacheHandlers } from "../controllers/cache.ts";
import { botID } from "../module/client.ts";
import { Permissions } from "../types/permission.ts";
export async function memberIDHasPermission(memberID, guildID, permissions) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return false;
    if (memberID === guild.ownerID)
        return true;
    const member = guild.members.get(memberID);
    if (!member)
        return false;
    return memberHasPermission(member.guildID, guild, member.roles, permissions);
}
export function memberHasPermission(memberID, guild, memberRoleIDs, permissions) {
    if (memberID === guild.ownerID)
        return true;
    const permissionBits = memberRoleIDs.map((id) => guild.roles.get(id)?.permissions)
        .filter((id) => id)
        .reduce((bits, permissions) => {
        bits |= BigInt(permissions);
        return bits;
    }, BigInt(0));
    if (permissionBits & BigInt(Permissions.ADMINISTRATOR))
        return true;
    return permissions.every((permission) => permissionBits & BigInt(Permissions[permission]));
}
export async function botHasPermission(guildID, permissions) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return false;
    const member = guild.members.get(botID);
    if (!member)
        return false;
    const permissionBits = member.roles
        .map((id) => guild.roles.get(id))
        .filter((r) => r)
        .reduce((bits, data) => {
        bits |= BigInt(data.permissions);
        return bits;
    }, BigInt(0));
    if (permissionBits & BigInt(Permissions.ADMINISTRATOR))
        return true;
    return permissions.every((permission) => permissionBits & BigInt(permission));
}
export function botHasChannelPermissions(channelID, permissions) {
    return hasChannelPermissions(channelID, botID, permissions);
}
export async function hasChannelPermissions(channelID, memberID, permissions) {
    const channel = await cacheHandlers.get("channels", channelID);
    if (!channel)
        return false;
    if (!channel.guildID)
        return true;
    const guild = await cacheHandlers.get("guilds", channel.guildID);
    if (!guild)
        return false;
    if (guild.ownerID === memberID)
        return true;
    if (await memberIDHasPermission(memberID, guild.id, ["ADMINISTRATOR"])) {
        return true;
    }
    const member = guild.members.get(memberID);
    if (!member)
        return false;
    let memberOverwrite;
    let everyoneOverwrite;
    let rolesOverwrites = [];
    for (const overwrite of channel.permission_overwrites || []) {
        if (overwrite.id === memberID)
            memberOverwrite = overwrite;
        if (overwrite.id === guild.id)
            everyoneOverwrite = overwrite;
        if (member.roles.includes(overwrite.id))
            rolesOverwrites.push(overwrite);
    }
    const allowedPermissions = new Set();
    if (memberOverwrite) {
        for (const perm of permissions) {
            if (BigInt(memberOverwrite.deny) & BigInt(perm))
                return false;
            if (allowedPermissions.has(perm))
                continue;
            if (BigInt(memberOverwrite.allow) & BigInt(perm)) {
                allowedPermissions.add(perm);
            }
        }
    }
    for (const perm of permissions) {
        if (allowedPermissions.has(perm))
            continue;
        for (const overwrite of rolesOverwrites) {
            if (BigInt(overwrite.allow) & BigInt(perm)) {
                allowedPermissions.add(perm);
                break;
            }
            if (BigInt(overwrite.deny) & BigInt(perm)) {
                const isAllowed = rolesOverwrites.some((o) => BigInt(o.allow) & BigInt(perm));
                if (isAllowed)
                    continue;
                return false;
            }
        }
    }
    if (everyoneOverwrite) {
        for (const perm of permissions) {
            if (allowedPermissions.has(perm))
                continue;
            if (BigInt(everyoneOverwrite.deny) & BigInt(perm))
                return false;
            if (BigInt(everyoneOverwrite.allow) & BigInt(perm)) {
                allowedPermissions.add(perm);
            }
        }
    }
    if (permissions.every((perm) => allowedPermissions.has(perm)))
        return true;
    return botHasPermission(guild.id, permissions);
}
export function calculatePermissions(permissionBits) {
    return Object.keys(Permissions).filter((perm) => {
        if (typeof perm !== "number")
            return false;
        return permissionBits & BigInt(Permissions[perm]);
    });
}
export function calculateBits(permissions) {
    return permissions.reduce((bits, perm) => bits |= BigInt(Permissions[perm]), BigInt(0)).toString();
}
export async function highestRole(guildID, memberID) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return;
    const member = guild?.members.get(memberID);
    if (!member)
        return;
    let memberHighestRole;
    for (const roleID of member.roles) {
        const role = guild.roles.get(roleID);
        if (!role)
            continue;
        if (!memberHighestRole || memberHighestRole.position < role.position) {
            memberHighestRole = role;
        }
    }
    return memberHighestRole || guild.roles.get(guild.id);
}
export async function higherRolePosition(guildID, roleID, otherRoleID) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return;
    const role = guild.roles.get(roleID);
    const otherRole = guild.roles.get(otherRoleID);
    if (!role || !otherRole)
        return;
    if (role.position === otherRole.position) {
        return role.id < otherRole.id;
    }
    return role.position > otherRole.position;
}
//# sourceMappingURL=data:application/json;base64,