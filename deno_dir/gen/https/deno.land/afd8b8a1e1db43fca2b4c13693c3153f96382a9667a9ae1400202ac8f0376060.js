import { endpoints } from "../constants/discord.ts";
import { cacheHandlers } from "../controllers/cache.ts";
import { RequestManager } from "../module/requestManager.ts";
import { structures } from "../structures/mod.ts";
import { ChannelTypes, } from "../types/channel.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
export function channelOverwriteHasPermission(guildID, id, overwrites, permissions) {
    const overwrite = overwrites.find((perm) => perm.id === id) ||
        overwrites.find((perm) => perm.id === guildID);
    return permissions.every((perm) => {
        if (overwrite) {
            if (BigInt(overwrite.deny) & BigInt(perm))
                return false;
            if (BigInt(overwrite.allow) & BigInt(perm))
                return true;
        }
        return false;
    });
}
export async function getMessage(channelID, id) {
    const hasViewChannelPerm = await botHasChannelPermissions(channelID, [Permissions.VIEW_CHANNEL]);
    if (!hasViewChannelPerm) {
        throw new Error(Errors.MISSING_VIEW_CHANNEL);
    }
    const hasReadMessageHistoryPerm = await botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY]);
    if (!hasReadMessageHistoryPerm) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    const result = await RequestManager.get(endpoints.CHANNEL_MESSAGE(channelID, id));
    return structures.createMessage(result);
}
export async function getMessages(channelID, options) {
    const hasViewChannelPerm = await botHasChannelPermissions(channelID, [Permissions.VIEW_CHANNEL]);
    if (!hasViewChannelPerm) {
        throw new Error(Errors.MISSING_VIEW_CHANNEL);
    }
    const hasReadMessageHistoryPerm = await botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY]);
    if (!hasReadMessageHistoryPerm) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    if (options?.limit && options.limit > 100)
        return;
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGES(channelID), options));
    return Promise.all(result.map((res) => structures.createMessage(res)));
}
export async function getPins(channelID) {
    const result = (await RequestManager.get(endpoints.CHANNEL_PINS(channelID)));
    return Promise.all(result.map((res) => structures.createMessage(res)));
}
export async function sendMessage(channelID, content) {
    if (typeof content === "string")
        content = { content };
    const hasSendMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.SEND_MESSAGES]);
    if (!hasSendMessagesPerm) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    const hasSendTtsMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.SEND_TTS_MESSAGES]);
    if (content.tts &&
        !hasSendTtsMessagesPerm) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    const hasEmbedLinksPerm = await botHasChannelPermissions(channelID, [Permissions.EMBED_LINKS]);
    if (content.embed &&
        !hasEmbedLinksPerm) {
        throw new Error(Errors.MISSING_EMBED_LINKS);
    }
    if (content.content && [...content.content].length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    if (content.mentions) {
        if (content.mentions.users?.length) {
            if (content.mentions.parse?.includes("users")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "users");
            }
            if (content.mentions.users.length > 100) {
                content.mentions.users = content.mentions.users.slice(0, 100);
            }
        }
        if (content.mentions.roles?.length) {
            if (content.mentions.parse?.includes("roles")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "roles");
            }
            if (content.mentions.roles.length > 100) {
                content.mentions.roles = content.mentions.roles.slice(0, 100);
            }
        }
    }
    const channel = await cacheHandlers.get("channels", channelID);
    if (!channel)
        throw new Error(Errors.CHANNEL_NOT_FOUND);
    if (![ChannelTypes.DM, ChannelTypes.GUILD_NEWS, ChannelTypes.GUILD_TEXT]
        .includes(channel.type)) {
        throw new Error(Errors.CHANNEL_NOT_TEXT_BASED);
    }
    const result = await RequestManager.post(endpoints.CHANNEL_MESSAGES(channelID), {
        ...content,
        allowed_mentions: content.mentions,
    });
    return structures.createMessage(result);
}
export async function deleteMessages(channelID, ids, reason) {
    const hasManageMessages = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessages) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    if (ids.length < 2) {
        throw new Error(Errors.DELETE_MESSAGES_MIN);
    }
    if (ids.length > 100) {
        console.warn(`This endpoint only accepts a maximum of 100 messages. Deleting the first 100 message ids provided.`);
    }
    return RequestManager.post(endpoints.CHANNEL_BULK_DELETE(channelID), {
        messages: ids.splice(0, 100),
        reason,
    });
}
export async function getChannelInvites(channelID) {
    const hasManagaChannels = await botHasChannelPermissions(channelID, [Permissions.MANAGE_CHANNELS]);
    if (!hasManagaChannels) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    return RequestManager.get(endpoints.CHANNEL_INVITES(channelID));
}
export async function createInvite(channelID, options) {
    const hasCreateInstantInvitePerm = await botHasChannelPermissions(channelID, [Permissions.CREATE_INSTANT_INVITE]);
    if (!hasCreateInstantInvitePerm) {
        throw new Error(Errors.MISSING_CREATE_INSTANT_INVITE);
    }
    return RequestManager.post(endpoints.CHANNEL_INVITES(channelID), options);
}
export async function getChannelWebhooks(channelID) {
    const hasManageWebhooksPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_WEBHOOKS]);
    if (!hasManageWebhooksPerm) {
        throw new Error(Errors.MISSING_MANAGE_WEBHOOKS);
    }
    return RequestManager.get(endpoints.CHANNEL_WEBHOOKS(channelID));
}
const editChannelNameTopicQueue = new Map();
let editChannelProcessing = false;
function processEditChannelQueue() {
    if (!editChannelProcessing)
        return;
    const now = Date.now();
    editChannelNameTopicQueue.forEach((request) => {
        if (now > request.timestamp)
            return;
        if (!request.items.length) {
            return editChannelNameTopicQueue.delete(request.channelID);
        }
        request.amount = 0;
        const details = request.items.shift();
        if (!details)
            return;
        editChannel(details.channelID, details.options);
        const secondDetails = request.items.shift();
        if (!secondDetails)
            return;
        return editChannel(secondDetails.channelID, secondDetails.options);
    });
    if (editChannelNameTopicQueue.size) {
        setTimeout(() => processEditChannelQueue(), 600000);
    }
    else {
        editChannelProcessing = false;
    }
}
export async function editChannel(channelID, options) {
    const hasManageChannelsPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_CHANNELS]);
    if (!hasManageChannelsPerm) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    if (options.name || options.topic) {
        const request = editChannelNameTopicQueue.get(channelID);
        if (!request) {
            editChannelNameTopicQueue.set(channelID, {
                channelID: channelID,
                amount: 1,
                timestamp: Date.now() + 600000,
                items: [],
            });
        }
        else if (request.amount === 1) {
            request.amount = 2;
            request.timestamp = Date.now() + 600000;
        }
        else {
            request.items.push({ channelID, options });
            if (editChannelProcessing)
                return;
            editChannelProcessing = true;
            processEditChannelQueue();
            return;
        }
    }
    const payload = {
        ...options,
        rate_limit_per_user: options.slowmode,
        parent_id: options.parentID,
        user_limit: options.userLimit,
        permission_overwrites: options.overwrites?.map((overwrite) => {
            return {
                ...overwrite,
                allow: overwrite.allow.reduce((bits, perm) => bits |= BigInt(Permissions[perm]), BigInt(0)).toString(),
                deny: overwrite.deny.reduce((bits, perm) => bits |= BigInt(Permissions[perm]), BigInt(0)).toString(),
            };
        }),
    };
    return RequestManager.patch(endpoints.GUILD_CHANNEL(channelID), payload);
}
export async function followChannel(sourceChannelID, targetChannelID) {
    const hasManageWebhooksPerm = await botHasChannelPermissions(targetChannelID, [Permissions.MANAGE_WEBHOOKS]);
    if (!hasManageWebhooksPerm) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    const data = await RequestManager.post(endpoints.CHANNEL_FOLLOW(sourceChannelID), {
        webhook_channel_id: targetChannelID,
    });
    return data.webhook_id;
}
//# sourceMappingURL=data:application/json;base64,