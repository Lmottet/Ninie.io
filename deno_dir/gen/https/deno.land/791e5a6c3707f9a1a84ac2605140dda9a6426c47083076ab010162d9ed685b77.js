import { eventHandlers } from "../module/client.ts";
import { structures } from "../structures/mod.ts";
import { cache } from "../utils/cache.ts";
import { cacheHandlers } from "./cache.ts";
export async function handleInternalGuildMemberAdd(data) {
    if (data.t !== "GUILD_MEMBER_ADD")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    guild.memberCount++;
    const member = await structures.createMember(payload, guild.id);
    guild.members.set(payload.user.id, member);
    eventHandlers.guildMemberAdd?.(guild, member);
}
export async function handleInternalGuildMemberRemove(data) {
    if (data.t !== "GUILD_MEMBER_REMOVE")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    guild.memberCount--;
    const member = guild.members.get(payload.user.id);
    eventHandlers.guildMemberRemove?.(guild, member || payload.user);
    guild.members.delete(payload.user.id);
}
export async function handleInternalGuildMemberUpdate(data) {
    if (data.t !== "GUILD_MEMBER_UPDATE")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    const cachedMember = guild.members.get(payload.user.id);
    const newMemberData = {
        ...payload,
        premium_since: payload.premium_since || undefined,
        joined_at: new Date(cachedMember?.joinedAt || Date.now())
            .toISOString(),
        deaf: cachedMember?.deaf || false,
        mute: cachedMember?.mute || false,
    };
    const member = await structures.createMember(newMemberData, guild.id);
    guild.members.set(payload.user.id, member);
    if (cachedMember?.nick !== payload.nick) {
        eventHandlers.nicknameUpdate?.(guild, member, payload.nick, cachedMember?.nick);
    }
    const roleIDs = cachedMember?.roles || [];
    roleIDs.forEach((id) => {
        if (!payload.roles.includes(id)) {
            eventHandlers.roleLost?.(guild, member, id);
        }
    });
    payload.roles.forEach((id) => {
        if (!roleIDs.includes(id)) {
            eventHandlers.roleGained?.(guild, member, id);
        }
    });
    eventHandlers.guildMemberUpdate?.(guild, member, cachedMember);
}
export async function handleInternalGuildMembersChunk(data) {
    if (data.t !== "GUILD_MEMBERS_CHUNK")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    payload.members.forEach(async (member) => {
        guild.members.set(member.user.id, await structures.createMember(member, guild.id));
    });
    if (payload.nonce) {
        const resolve = cache.fetchAllMembersProcessingRequests.get(payload.nonce);
        if (!resolve)
            return;
        if (payload.chunk_index + 1 === payload.chunk_count) {
            cache.fetchAllMembersProcessingRequests.delete(payload.nonce);
            resolve(guild.members);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lbWJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVFsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUzQyxNQUFNLENBQUMsS0FBSyxVQUFVLDRCQUE0QixDQUFDLElBQW9CO0lBQ3JFLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxrQkFBa0I7UUFBRSxPQUFPO0lBRTFDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUEwQixDQUFDO0lBQ2hELE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xFLElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTztJQUVuQixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsWUFBWSxDQUMxQyxPQUFPLEVBQ1AsS0FBSyxDQUFDLEVBQUUsQ0FDVCxDQUFDO0lBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFM0MsYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSwrQkFBK0IsQ0FBQyxJQUFvQjtJQUN4RSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUsscUJBQXFCO1FBQUUsT0FBTztJQUU3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBb0Is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