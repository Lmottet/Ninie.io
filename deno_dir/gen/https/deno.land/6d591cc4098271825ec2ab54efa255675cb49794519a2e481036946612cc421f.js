import { Collection } from "../utils/collection.ts";
import { structures } from "./mod.ts";
export async function createGuild(data, shardID) {
    const { owner_id: ownerID, afk_channel_id: afkChannelID, afk_timeout: afkTimeout, widget_enabled: widgetEnabled, widget_channel_id: widgetChannelID, verification_level: verificationLevel, mfa_level: mfaLevel, system_channel_id: systemChannelID, max_presences: maxPresences, max_members: maxMembers, vanity_url_code: vanityURLCode, premium_tier: premiumTier, premium_subscription_count: premiumSubscriptionCount, preferred_locale: preferredLocale, joined_at: joinedAt, member_count: memberCount, voice_states: voiceStates, ...rest } = data;
    const roles = await Promise.all(data.roles.map((r) => structures.createRole(r)));
    const channels = await Promise.all(data.channels.map((c) => structures.createChannel(c, data.id)));
    const guild = {
        ...rest,
        shardID,
        ownerID,
        afkChannelID,
        afkTimeout,
        widgetEnabled,
        widgetChannelID,
        verificationLevel,
        mfaLevel,
        systemChannelID,
        maxPresences,
        maxMembers,
        vanityURLCode,
        premiumTier,
        premiumSubscriptionCount,
        preferredLocale,
        roles: new Collection(roles.map((r) => [r.id, r])),
        joinedAt: Date.parse(joinedAt),
        members: new Collection(),
        channels: new Collection(channels.map((c) => [c.id, c])),
        presences: new Collection(data.presences.map((p) => [p.user.id, p])),
        memberCount: memberCount || 0,
        voiceStates: new Collection(voiceStates.map((vs) => [vs.user_id, {
                ...vs,
                guildID: vs.guild_id,
                channelID: vs.channel_id,
                userID: vs.user_id,
                sessionID: vs.session_id,
                selfDeaf: vs.self_deaf,
                selfMute: vs.self_mute,
                selfStream: vs.self_stream,
            }])),
    };
    data.members.forEach(async (m) => guild.members.set(m.user.id, await structures.createMember(m, guild.id)));
    return guild;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJndWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxJQUF3QixFQUFFLE9BQWU7SUFDekUsTUFBTSxFQUNKLFFBQVEsRUFBRSxPQUFPLEVBQ2pCLGNBQWMsRUFBRSxZQUFZLEVBQzVCLFdBQVcsRUFBRSxVQUFVLEVBQ3ZCLGNBQWMsRUFBRSxhQUFhLEVBQzdCLGlCQUFpQixFQUFFLGVBQWUsRUFDbEMsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQ3JDLFNBQVMsRUFBRSxRQUFRLEVBQ25CLGlCQUFpQixFQUFFLGVBQWUsRUFDbEMsYUFBYSxFQUFFLFlBQVksRUFDM0IsV0FBVyxFQUFFLFVBQVUsRUFDdkIsZUFBZSxFQUFFLGFBQWEsRUFDOUIsWUFBWSxFQUFFLFdBQVcsRUFDekIsMEJBQTBCLEVBQUUsd0JBQXdCLEVBQ3BELGdCQUFnQixFQUFFLGVBQWUsRUFDakMsU0FBUyxFQUFFLFFBQVEsRUFDbkIsWUFBWSxFQUFFLFdBQVcsRUFDekIsWUFBWSxFQUFFLFdBQVcsRUFDekIsR0FBRyxJQUFJLEVBQ1IsR0FBRyxJQUFJLENBQUM7SUFFVCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2hELENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDL0QsQ0FBQztJQUVGLE1BQU0sS0FBSyxHQUFHO1FBQ1osR0FBRyxJQUFJO1FBRVAsT0FBTztRQUVQLE9BQU87UUFFUCxZQUFZO1FBRVosVUFBVTtRQUVWLGFBQWE7UUFFYixlQUFlO1FBRWYsaUJBQWlCO1FBRWpCLFFBQVE7UUFFUixlQUFlO1FBRWYsWUFBWTtRQUVaLFVBQVU7UUFFVixhQUFhO1FBRWIsV0FBVztRQUVYLHdCQUF3QjtRQUV4QixlQUFlO1FBR2YsS0FBSyxFQUFFLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxELFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUU5QixPQUFPLEVBQUUsSUFBSSxVQUFVLEVBQWtCO1FBRXpDLFFBQVEsRUFBRSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV4RCxTQUFTLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwRSxXQUFXLEVBQUUsV0FBVyxJQUFJLENBQUM7UUFFN0IsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFDL0QsR0FBRyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxFQUFFLENBQUMsUUFBUTtnQkFDcEIsU0FBUyxFQUFFLEVBQUUsQ0FBQyxVQUFVO2dCQUN4QixNQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU87Z0JBQ2xCLFNBQVMsRUFBRSxFQUFFLENBQUMsVUFBVTtnQkFDeEIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQUFTO2dCQUN0QixRQUFRLEVBQUUsRUFBRSxDQUFDLFNBQVM7Z0JBQ3RCLFVBQVUsRUFBRSxFQUFFLENBQUMsV0FBVzthQUMzQixDQUFDLENBQUMsQ0FBQztLQUNMLENBQUM7SUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDekUsQ0FBQztJQUVGLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyJ9