import { endpoints } from "../constants/discord.ts";
import { cacheHandlers } from "../controllers/cache.ts";
import { botID } from "../module/client.ts";
import { RequestManager } from "../module/requestManager.ts";
import { structures } from "../structures/mod.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { formatImageURL } from "../utils/cdn.ts";
import { botHasPermission, higherRolePosition, highestRole, } from "../utils/permissions.ts";
import { sendMessage } from "./channel.ts";
export function rawAvatarURL(userID, discriminator, avatar, size = 128, format) {
    return avatar
        ? formatImageURL(endpoints.USER_AVATAR(userID, avatar), size, format)
        : endpoints.USER_DEFAULT_AVATAR(Number(discriminator) % 5);
}
export function avatarURL(member, size = 128, format) {
    return rawAvatarURL(member.user.id, member.user.discriminator, member.user.avatar, size, format);
}
export async function addRole(guildID, memberID, roleID, reason) {
    const botsHighestRole = await highestRole(guildID, botID);
    if (botsHighestRole &&
        !higherRolePosition(guildID, botsHighestRole.id, roleID)) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.put(endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID), { reason });
}
export async function removeRole(guildID, memberID, roleID, reason) {
    const botsHighestRole = await highestRole(guildID, botID);
    if (botsHighestRole &&
        !higherRolePosition(guildID, botsHighestRole.id, roleID)) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.delete(endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID), { reason });
}
export async function sendDirectMessage(memberID, content) {
    let dmChannel = await cacheHandlers.get("channels", memberID);
    if (!dmChannel) {
        const dmChannelData = await RequestManager.post(endpoints.USER_CREATE_DM, { recipient_id: memberID });
        cacheHandlers.delete("channels", dmChannelData.id);
        const channel = await structures.createChannel(dmChannelData);
        cacheHandlers.set("channels", memberID, channel);
        dmChannel = channel;
    }
    return sendMessage(dmChannel.id, content);
}
export async function kick(guildID, memberID, reason) {
    const botsHighestRole = await highestRole(guildID, botID);
    const membersHighestRole = await highestRole(guildID, memberID);
    if (botsHighestRole && membersHighestRole &&
        botsHighestRole.position <= membersHighestRole.position) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guildID, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    return RequestManager.delete(endpoints.GUILD_MEMBER(guildID, memberID), { reason });
}
export function editMember(guildID, memberID, options) {
    if (options.nick) {
        if (options.nick.length > 32) {
            throw new Error(Errors.NICKNAMES_MAX_LENGTH);
        }
        if (!botHasPermission(guildID, [Permissions.MANAGE_NICKNAMES])) {
            throw new Error(Errors.MISSING_MANAGE_NICKNAMES);
        }
    }
    if (options.roles &&
        !botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    if (options.mute) {
        if (!botHasPermission(guildID, [Permissions.MUTE_MEMBERS])) {
            throw new Error(Errors.MISSING_MUTE_MEMBERS);
        }
    }
    if (options.deaf &&
        !botHasPermission(guildID, [Permissions.DEAFEN_MEMBERS])) {
        throw new Error(Errors.MISSING_DEAFEN_MEMBERS);
    }
    return RequestManager.patch(endpoints.GUILD_MEMBER(guildID, memberID), options);
}
export function moveMember(guildID, memberID, channelID) {
    return editMember(guildID, memberID, { channel_id: channelID });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsV0FBVyxHQUNaLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUczQyxNQUFNLFVBQVUsWUFBWSxDQUMxQixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsTUFBc0IsRUFDdEIsT0FBa0IsR0FBRyxFQUNyQixNQUFxQjtJQUVyQixPQUFPLE1BQU07UUFDWCxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUM7UUFDckUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUdELE1BQU0sVUFBVSxTQUFTLENBQ3ZCLE1BQWMsRUFDZCxPQUFrQixHQUFHLEVBQ3JCLE1BQXFCO0lBRXJCLE9BQU8sWUFB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