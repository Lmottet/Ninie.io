import { delay } from "../../deps.ts";
import { endpoints } from "../constants/discord.ts";
import { cacheHandlers } from "../controllers/cache.ts";
import { botID } from "../module/client.ts";
import { RequestManager } from "../module/requestManager.ts";
import { structures } from "../structures/mod.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
export async function deleteMessageByID(channelID, messageID, reason, delayMilliseconds = 0) {
    const message = await cacheHandlers.get("messages", messageID);
    if (message)
        return deleteMessage(message, reason, delayMilliseconds);
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(channelID, messageID), { reason });
}
export async function deleteMessage(message, reason, delayMilliseconds = 0) {
    if (message.author.id !== botID) {
        const hasManageMessages = await botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES]);
        if (!hasManageMessages) {
            throw new Error(Errors.MISSING_MANAGE_MESSAGES);
        }
    }
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), { reason });
}
export async function pin(channelID, messageID) {
    const hasManageMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessagesPerm) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.put(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export async function unpin(channelID, messageID) {
    const hasManageMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessagesPerm) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export async function addReaction(channelID, messageID, reaction) {
    const hasAddReactionsPerm = await botHasChannelPermissions(channelID, [Permissions.ADD_REACTIONS]);
    if (!hasAddReactionsPerm) {
        throw new Error(Errors.MISSING_ADD_REACTIONS);
    }
    const hasReadMessageHistoryPerm = await botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY]);
    if (!hasReadMessageHistoryPerm) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    if (reaction.startsWith("<:")) {
        reaction = reaction.substring(2, reaction.length - 1);
    }
    else if (reaction.startsWith("<a:")) {
        reaction = reaction.substring(3, reaction.length - 1);
    }
    return RequestManager.put(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export async function addReactions(channelID, messageID, reactions, ordered = false) {
    if (!ordered) {
        reactions.forEach((reaction) => addReaction(channelID, messageID, reaction));
    }
    else {
        for (const reaction of reactions) {
            await addReaction(channelID, messageID, reaction);
        }
    }
}
export function removeReaction(channelID, messageID, reaction) {
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export async function removeUserReaction(channelID, messageID, reaction, userID) {
    const hasManageMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessagesPerm) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_USER(channelID, messageID, reaction, userID));
}
export async function removeAllReactions(channelID, messageID) {
    const hasManageMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessagesPerm) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTIONS(channelID, messageID));
}
export async function removeReactionEmoji(channelID, messageID, reaction) {
    const hasManageMessagesPerm = await botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES]);
    if (!hasManageMessagesPerm) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION(channelID, messageID, reaction));
}
export async function getReactions(message, reaction) {
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGE_REACTION(message.channelID, message.id, reaction)));
    const guild = await cacheHandlers.get("guilds", message.guildID);
    return result.map((res) => {
        return guild?.members.get(res.id) || res;
    });
}
export async function editMessage(message, content) {
    if (message.author.id !== botID) {
        throw "You can only edit a message that was sent by the bot.";
    }
    if (typeof content === "string")
        content = { content };
    const hasSendMessagesPerm = await botHasChannelPermissions(message.channelID, [Permissions.SEND_MESSAGES]);
    if (!hasSendMessagesPerm) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    const hasSendTtsMessagesPerm = await botHasChannelPermissions(message.channelID, [Permissions.SEND_TTS_MESSAGES]);
    if (content.tts &&
        !hasSendTtsMessagesPerm) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    if (content.content && content.content.length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    const result = await RequestManager.patch(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), content);
    return structures.createMessage(result);
}
export async function publishMessage(channelID, messageID) {
    const data = await RequestManager.post(endpoints.CHANNEL_MESSAGE_CROSSPOST(channelID, messageID));
    return structures.createMessage(data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHbkUsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBZSxFQUNmLGlCQUFpQixHQUFHLENBQUM7SUFFckIsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvRCxJQUFJLE9BQU87UUFBRSxPQUFPLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFdEUsSUFBSSxpQkFBaUI7UUFBRSxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXRELE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FDMUIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQy9DLEVBQUUsTUFBTSxFQUFFLENBQ1gsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLENBQUMs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