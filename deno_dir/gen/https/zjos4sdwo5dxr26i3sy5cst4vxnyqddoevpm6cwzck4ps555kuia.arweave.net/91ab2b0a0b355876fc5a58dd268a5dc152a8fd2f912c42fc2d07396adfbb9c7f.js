import { createChannel } from "../structures/channel.ts";
import { formatImageURL } from "../utils/cdn.ts";
import { botHasPermission } from "../utils/permissions.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { ChannelTypes, } from "../types/channel.ts";
import { createRole } from "../structures/role.ts";
import { Intents } from "../types/options.ts";
import { identifyPayload } from "../module/client.ts";
import { requestAllMembers } from "../module/shardingManager.ts";
import { cache } from "../utils/cache.ts";
import { createMember } from "../structures/member.ts";
import { urlToBase64 } from "../utils/utils.ts";
export function categoryChildrenIDs(guild, id) {
    const channelIDs = [];
    guild.channels.forEach((channel) => {
        if (channel.parentID === id)
            channelIDs.push(channel.id);
    });
    return channelIDs;
}
export function guildIconURL(guild, size = 128, format) {
    return guild.icon
        ? formatImageURL(endpoints.GUILD_ICON(guild.id, guild.icon), size, format)
        : undefined;
}
export function guildSplashURL(guild, size = 128, format) {
    return guild.splash
        ? formatImageURL(endpoints.GUILD_SPLASH(guild.id, guild.splash), size, format)
        : undefined;
}
export function guildBannerURL(guild, size = 128, format) {
    return guild.banner
        ? formatImageURL(endpoints.GUILD_BANNER(guild.id, guild.banner), size, format)
        : undefined;
}
export async function createGuildChannel(guild, name, options) {
    if (!botHasPermission(guild.id, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    const result = (await RequestManager.post(endpoints.GUILD_CHANNELS(guild.id), {
        ...options,
        name,
        permission_overwrites: options?.permission_overwrites?.map((perm) => ({
            ...perm,
            allow: perm.allow.reduce((bits, p) => bits & BigInt(Permissions[p]), BigInt(0)).toString(),
            deny: perm.deny.reduce((bits, p) => bits & BigInt(Permissions[p]), BigInt(0)).toString(),
        })),
        type: options?.type || ChannelTypes.GUILD_TEXT,
    }));
    const channel = createChannel(result);
    guild.channels.set(result.id, channel);
    return channel;
}
export function deleteChannel(guildID, channelID, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    return RequestManager.delete(endpoints.CHANNEL(channelID), { reason });
}
export function getChannels(guildID) {
    return RequestManager.get(endpoints.GUILD_CHANNELS(guildID));
}
export function swapChannels(guildID, channelPositions) {
    if (channelPositions.length < 2) {
        throw "You must provide atleast two channels to be swapped.";
    }
    return RequestManager.patch(endpoints.GUILD_CHANNELS(guildID), channelPositions);
}
export async function getMember(guildID, id) {
    const guild = cache.guilds.get(guildID);
    if (!guild)
        return;
    const data = await RequestManager.get(endpoints.GUILD_MEMBER(guildID, id));
    const member = createMember(data, guild);
    guild.members.set(id, member);
    return member;
}
export async function createEmoji(guildID, name, image, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    if (image && !image.startsWith("data:image/")) {
        image = await urlToBase64(image);
    }
    return RequestManager.post(endpoints.GUILD_EMOJIS(guildID), {
        ...options,
        name,
        image,
    });
}
export function editEmoji(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    return RequestManager.patch(endpoints.GUILD_EMOJI(guildID, id), {
        name: options.name,
        roles: options.roles,
    });
}
export function deleteEmoji(guildID, id, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    return RequestManager.delete(endpoints.GUILD_EMOJI(guildID, id), { reason });
}
export function emojiURL(id, animated = false) {
    return `https://cdn.discordapp.com/emojis/${id}.${animated ? "gif" : "png"}`;
}
export async function createGuildRole(guildID, options, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    const result = await RequestManager.post(endpoints.GUILD_ROLES(guildID), {
        ...options,
        permissions: options.permissions
            ?.reduce((subtotal, perm) => {
            subtotal |= Permissions[perm];
            return subtotal;
        }, 0),
        reason,
    });
    const roleData = result;
    const role = createRole(roleData);
    const guild = cache.guilds.get(guildID);
    guild?.roles.set(role.id, role);
    return role;
}
export function editRole(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.patch(endpoints.GUILD_ROLE(guildID, id), options);
}
export function deleteRole(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.delete(endpoints.GUILD_ROLE(guildID, id));
}
export function getRoles(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.get(endpoints.GUILD_ROLES(guildID));
}
export function swapRoles(guildID, rolePositons) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.patch(endpoints.GUILD_ROLES(guildID), rolePositons);
}
export async function getPruneCount(guildID, options) {
    if (options.days < 1) {
        throw new Error(Errors.PRUNE_MIN_DAYS);
    }
    if (!botHasPermission(guildID, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    const result = await RequestManager.get(endpoints.GUILD_PRUNE(guildID), { ...options, include_roles: options.roles.join(",") });
    return result.pruned;
}
export function pruneMembers(guildID, options) {
    if (options.days < 1) {
        throw new Error(Errors.PRUNE_MIN_DAYS);
    }
    if (!botHasPermission(guildID, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    RequestManager.post(endpoints.GUILD_PRUNE(guildID), { ...options, include_roles: options.roles.join(",") });
}
export function fetchMembers(guild, options) {
    if (!(identifyPayload.intents & Intents.GUILD_MEMBERS)) {
        throw new Error(Errors.MISSING_INTENT_GUILD_MEMBERS);
    }
    return new Promise((resolve) => {
        requestAllMembers(guild, resolve, options);
    });
}
export function getAuditLogs(guildID, options) {
    if (!botHasPermission(guildID, [Permissions.VIEW_AUDIT_LOG])) {
        throw new Error(Errors.MISSING_VIEW_AUDIT_LOG);
    }
    return RequestManager.get(endpoints.GUILD_AUDIT_LOGS(guildID), {
        ...options,
        limit: options.limit && options.limit >= 1 && options.limit <= 100
            ? options.limit
            : 50,
    });
}
export function getEmbed(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_EMBED(guildID));
}
export function editEmbed(guildID, enabled, channelID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.patch(endpoints.GUILD_EMBED(guildID), { enabled, channel_id: channelID });
}
export function getVanityURL(guildID) {
    return RequestManager.get(endpoints.GUILD_VANITY_URL(guildID));
}
export function getIntegrations(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_INTEGRATIONS(guildID));
}
export function editIntegration(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.patch(endpoints.GUILD_INTEGRATION(guildID, id), options);
}
export function deleteIntegration(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.delete(endpoints.GUILD_INTEGRATION(guildID, id));
}
export function syncIntegration(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.post(endpoints.GUILD_INTEGRATION_SYNC(guildID, id));
}
export function getBans(guildID) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.get(endpoints.GUILD_BANS(guildID));
}
export function ban(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.put(endpoints.GUILD_BAN(guildID, id), { ...options, delete_message_days: options.days });
}
export function unban(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.delete(endpoints.GUILD_BAN(guildID, id));
}
export function channelHasPermissions(guild, channelID, memberID, permissions) {
    if (memberID === guild.ownerID)
        return true;
    const member = guild.members.get(memberID);
    if (!member) {
        throw new Error("Invalid member id provided. This member was not found in the cache. Please fetch them with getMember on guild.");
    }
    const channel = guild.channels.get(channelID);
    if (!channel) {
        throw new Error("Invalid channel id provided. This channel was not found in the cache.");
    }
    let permissionBits = member.roles.reduce((bits, roleID) => {
        const role = guild.roles.get(roleID);
        if (!role)
            return bits;
        bits |= BigInt(role.permissions_new);
        return bits;
    }, BigInt(0));
    if (permissionBits & BigInt(Permissions.ADMINISTRATOR))
        return true;
    return permissions.every((permission) => permissionBits & BigInt(Permissions[permission]));
}
export async function editGuild(guildID, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    if (options.icon && !options.icon.startsWith("data:image/")) {
        options.icon = await urlToBase64(options.icon);
    }
    if (options.banner && !options.banner.startsWith("data:image/")) {
        options.banner = await urlToBase64(options.banner);
    }
    if (options.splash && !options.splash.startsWith("data:image/")) {
        options.splash = await urlToBase64(options.splash);
    }
    return RequestManager.patch(endpoints.GUILD(guildID), options);
}
export function getInvites(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_INVITES(guildID));
}
export function leave(guildID) {
    return RequestManager.delete(endpoints.GUILD_LEAVE(guildID));
}
export function getVoiceRegions(guildID) {
    return RequestManager.get(endpoints.GUILD_REGIONS(guildID));
}
export function getWebhooks(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_WEBHOOKS])) {
        throw new Error(Errors.MISSING_MANAGE_WEBHOOKS);
    }
    return RequestManager.get(endpoints.GUILD_WEBHOOKS(guildID));
}
//# sourceMappingURL=data:application/json;base64,