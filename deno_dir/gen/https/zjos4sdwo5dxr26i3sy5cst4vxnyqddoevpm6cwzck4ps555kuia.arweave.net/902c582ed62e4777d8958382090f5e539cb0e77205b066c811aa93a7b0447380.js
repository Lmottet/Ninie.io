import { Permissions, } from "../types/permission.ts";
import { cache } from "./cache.ts";
import { botID } from "../module/client.ts";
export function memberIDHasPermission(memberID, guildID, permissions) {
    const guild = cache.guilds.get(guildID);
    if (!guild)
        return false;
    if (memberID === guild.ownerID)
        return true;
    const member = guild.members.get(memberID);
    if (!member)
        return false;
    return memberHasPermission(member.guildID, guild, member.roles, permissions);
}
export function memberHasPermission(memberID, guild, memberRoleIDs, permissions) {
    if (memberID === guild.ownerID)
        return true;
    const permissionBits = memberRoleIDs.map((id) => guild.roles.get(id)?.permissions_new)
        .reduce((bits, permissions) => {
        bits |= BigInt(permissions);
        return bits;
    }, BigInt(0));
    if (permissionBits & BigInt(Permissions.ADMINISTRATOR))
        return true;
    return permissions.every((permission) => permissionBits & BigInt(Permissions[permission]));
}
export function botHasPermission(guildID, permissions) {
    const guild = cache.guilds.get(guildID);
    if (!guild)
        return false;
    const member = guild.members.get(botID);
    if (!member)
        return false;
    const permissionBits = member.roles
        .map((id) => guild.roles.get(id))
        .reduce((bits, data) => {
        bits |= BigInt(data.permissions_new);
        return bits;
    }, BigInt(0));
    if (permissionBits & BigInt(Permissions.ADMINISTRATOR))
        return true;
    return permissions.every((permission) => permissionBits & BigInt(permission));
}
export function botHasChannelPermissions(channelID, permissions) {
    return hasChannelPermissions(channelID, botID, permissions);
}
export function hasChannelPermissions(channelID, memberID, permissions) {
    const channel = cache.channels.get(channelID);
    if (!channel?.guildID)
        return true;
    const guild = cache.guilds.get(channel.guildID);
    if (!guild)
        return false;
    if (guild.ownerID === memberID)
        return true;
    if (botHasPermission(guild.id, [Permissions.ADMINISTRATOR]))
        return true;
    const member = guild.members.get(memberID);
    if (!member)
        return false;
    const memberOverwrite = channel.permission_overwrites?.find((o) => o.id === memberID);
    const rolesOverwrites = channel.permission_overwrites?.filter((o) => member.roles.includes(o.id));
    const everyoneOverwrite = channel.permission_overwrites?.find((o) => o.id === guild.id);
    const allowedPermissions = new Set();
    if (memberOverwrite) {
        if (permissions.some((perm) => BigInt(memberOverwrite.deny_new) & BigInt(perm))) {
            return false;
        }
        permissions.forEach((perm) => {
            if (allowedPermissions.has(perm))
                return;
            if (BigInt(memberOverwrite.allow_new) & BigInt(perm)) {
                allowedPermissions.add(perm);
            }
        });
    }
    if (rolesOverwrites?.length) {
        if (rolesOverwrites.some((overwrite) => permissions.some((perm) => (BigInt(overwrite.deny_new) & BigInt(perm)) &&
            !rolesOverwrites.some((o) => BigInt(o.allow_new) & BigInt(perm)) &&
            !(memberOverwrite && BigInt(memberOverwrite.allow_new) & BigInt(perm))))) {
            return false;
        }
        permissions.forEach((perm) => {
            if (allowedPermissions.has(perm))
                return;
            rolesOverwrites.forEach((overwrite) => {
                if (BigInt(overwrite.allow_new) & BigInt(perm)) {
                    allowedPermissions.add(perm);
                }
            });
        });
    }
    if (everyoneOverwrite) {
        if (permissions.some((perm) => BigInt(everyoneOverwrite.deny_new) & BigInt(perm) &&
            !allowedPermissions.has(perm))) {
            return false;
        }
        if (permissions.every((perm) => BigInt(everyoneOverwrite.allow_new) & BigInt(perm))) {
            return true;
        }
    }
    return botHasPermission(guild.id, permissions);
}
export function calculatePermissions(permissionBits) {
    return Object.keys(Permissions).filter((perm) => {
        if (typeof perm !== "number")
            return false;
        return permissionBits & BigInt(Permissions[perm]);
    });
}
export function highestRole(guildID, memberID) {
    const guild = cache.guilds.get(guildID);
    if (!guild)
        return;
    const member = guild?.members.get(memberID);
    if (!member)
        return;
    let memberHighestRole;
    for (const roleID of member.roles) {
        const role = guild.roles.get(roleID);
        if (!role)
            continue;
        if (!memberHighestRole || memberHighestRole.position < role.position) {
            memberHighestRole = role;
        }
    }
    return memberHighestRole || guild.roles.get(guild.id);
}
export function higherRolePosition(guildID, roleID, otherRoleID) {
    const guild = cache.guilds.get(guildID);
    if (!guild)
        return;
    const role = guild.roles.get(roleID);
    const otherRole = guild.roles.get(otherRoleID);
    if (!role || !otherRole)
        return;
    if (role.position === otherRole.position) {
        return role.id < otherRole.id;
    }
    return role.position > otherRole.position;
}
//# sourceMappingURL=data:application/json;base64,