import { createMessage } from "../structures/message.ts";
import { delay } from "https://deno.land/std@0.61.0/async/delay.ts";
import { botID } from "../module/client.ts";
import { hasChannelPermission } from "./channel.ts";
import { Permissions } from "../types/permission.ts";
import { Errors } from "../types/errors.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
export async function deleteMessage(message, reason, delayMilliseconds = 0) {
    if (message.author.id !== botID) {
        if (!message.guildID ||
            !hasChannelPermission(message.channel, botID, [Permissions.MANAGE_MESSAGES])) {
            throw new Error(Errors.MISSING_MANAGE_MESSAGES);
        }
    }
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), { reason });
}
export function pin(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.put(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export function unpin(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export function addReaction(channelID, messageID, reaction) {
    return RequestManager.put(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export async function addReactions(channelID, messageID, reactions, ordered = false) {
    if (!ordered) {
        reactions.forEach((reaction) => addReaction(channelID, messageID, reaction));
    }
    else {
        for (const reaction of reactions) {
            await addReaction(channelID, messageID, reaction);
        }
    }
}
export function removeReaction(channelID, messageID, reaction) {
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export function removeAllReactions(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTIONS(channelID, messageID));
}
export function removeReactionEmoji(channelID, messageID, reaction) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION(channelID, messageID, reaction));
}
export async function getReactions(message, reaction) {
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGE_REACTION(message.channelID, message.id, reaction)));
    const guild = message.guild();
    return result.map((res) => {
        return guild?.members.get(res.id) || res;
    });
}
export async function editMessage(message, content) {
    if (message.author.id !== botID) {
        throw "You can only edit a message that was sent by the bot.";
    }
    if (typeof content === "string")
        content = { content };
    if (!botHasChannelPermissions(message.channelID, [Permissions.SEND_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    if (content.tts &&
        !botHasChannelPermissions(message.channelID, [Permissions.SEND_TTS_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    if (content.content && content.content.length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    const result = await RequestManager.patch(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), content);
    return createMessage(result);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFXLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU1uRSxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDakMsT0FBZ0IsRUFDaEIsTUFBZSxFQUNmLGlCQUFpQixHQUFHLENBQUM7SUFFckIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUU7UUFFL0IsSUFDRSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ2hCLENBQUMsb0JBQW9CLENBQ25CLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsS0FBSyxFQUNMLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUM5QixFQUNEO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUNqRDtLQUNGO0lBRUQsSUFBSSxpQkFBaUI7UUFBRSxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXRELE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FDMUIsU0FBUyxDQUFDLGVBQWUsQ0FB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