import { formatImageURL } from "../utils/cdn.ts";
import { endpoints } from "../constants/discord.ts";
import { highestRole, higherRolePosition, botHasPermission, } from "../utils/permissions.ts";
import { botID } from "../module/client.ts";
import { Permissions } from "../types/permission.ts";
import { Errors } from "../types/errors.ts";
import { RequestManager } from "../module/requestManager.ts";
import { cache } from "../utils/cache.ts";
import { createChannel } from "../structures/channel.ts";
import { sendMessage } from "./channel.ts";
export function avatarURL(member, size = 128, format) {
    return member.user.avatar
        ? formatImageURL(endpoints.USER_AVATAR(member.user.id, member.user.avatar), size, format)
        : endpoints.USER_DEFAULT_AVATAR(Number(member.user.discriminator) % 5);
}
export function addRole(guild, memberID, roleID, reason) {
    const botsHighestRole = highestRole(guild.id, botID);
    if (botsHighestRole &&
        !higherRolePosition(guild.id, botsHighestRole.id, roleID)) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guild.id, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.put(endpoints.GUILD_MEMBER_ROLE(guild.id, memberID, roleID), { reason });
}
export function removeRole(guildID, memberID, roleID, reason) {
    const botsHighestRole = highestRole(guildID, botID);
    if (botsHighestRole &&
        !higherRolePosition(guildID, botsHighestRole.id, roleID)) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.delete(endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID), { reason });
}
export async function sendDirectMessage(memberID, content) {
    let dmChannel = cache.channels.get(memberID);
    if (!dmChannel) {
        const dmChannelData = await RequestManager.post(endpoints.USER_CREATE_DM, { recipient_id: memberID });
        cache.channels.delete(dmChannelData.id);
        const channel = createChannel(dmChannelData);
        cache.channels.set(memberID, channel);
        dmChannel = channel;
    }
    return sendMessage(dmChannel, content);
}
export function kick(guild, memberID, reason) {
    const botsHighestRole = highestRole(guild.id, botID);
    const membersHighestRole = highestRole(guild.id, memberID);
    if (botsHighestRole && membersHighestRole &&
        botsHighestRole.position <= membersHighestRole.position) {
        throw new Error(Errors.BOTS_HIGHEST_ROLE_TOO_LOW);
    }
    if (!botHasPermission(guild.id, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    return RequestManager.delete(endpoints.GUILD_MEMBER(guild.id, memberID), { reason });
}
export function editMember(guild, memberID, options) {
    if (options.nick) {
        if (options.nick.length > 32) {
            throw new Error(Errors.NICKNAMES_MAX_LENGTH);
        }
        if (!botHasPermission(guild.id, [Permissions.MANAGE_NICKNAMES])) {
            throw new Error(Errors.MISSING_MANAGE_NICKNAMES);
        }
    }
    if (options.roles &&
        !botHasPermission(guild.id, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    if (options.mute) {
        if (!botHasPermission(guild.id, [Permissions.MUTE_MEMBERS])) {
            throw new Error(Errors.MISSING_MUTE_MEMBERS);
        }
    }
    if (options.deaf &&
        !botHasPermission(guild.id, [Permissions.DEAFEN_MEMBERS])) {
        throw new Error(Errors.MISSING_DEAFEN_MEMBERS);
    }
    return RequestManager.patch(endpoints.GUILD_MEMBER(guild.id, memberID), options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUNMLFdBQVcsRUFDWCxrQkFBa0IsRUFDbEIsZ0JBQWdCLEdBQ2pCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTdELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUczQyxNQUFNLFVBQVUsU0FBUyxDQUN2QixNQUFjLEVBQ2QsT0FBa0IsR0FBRyxFQUNyQixNQUFxQjtJQUVyQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUN2QixDQUFDLENBQUMsY0FBYyxDQUNkLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDekQsSUFBSSxFQUNKLE1BQU0sQ0FDUDtRQUNELENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUdELE1BQU0sVUFBVSxP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