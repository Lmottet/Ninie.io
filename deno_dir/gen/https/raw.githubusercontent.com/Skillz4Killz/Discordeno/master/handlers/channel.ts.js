import { Permissions } from "../types/permission.ts";
import { botHasPermission, botHasChannelPermissions, } from "../utils/permissions.ts";
import { Errors } from "../types/errors.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { createMessage } from "../structures/message.ts";
import { logYellow } from "../utils/logger.ts";
export function hasChannelPermission(channel, id, permissions) {
    const overwrite = channel.permission_overwrites?.find((perm) => perm.id === id) ||
        channel.permission_overwrites?.find((perm) => perm.id === channel.guildID);
    return permissions.every((perm) => {
        if (overwrite) {
            if (overwrite.deny & perm)
                return false;
            if (overwrite.allow & perm)
                return true;
        }
        if (channel.guildID) {
            return botHasPermission(channel.guildID, [perm]);
        }
        return false;
    });
}
export async function getMessage(channel, id) {
    if (channel.guildID) {
        if (!botHasChannelPermissions(channel.id, [Permissions.VIEW_CHANNEL])) {
            throw new Error(Errors.MISSING_VIEW_CHANNEL);
        }
        if (!botHasChannelPermissions(channel.id, [Permissions.READ_MESSAGE_HISTORY])) {
            throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
        }
    }
    const result = await RequestManager.get(endpoints.CHANNEL_MESSAGE(channel.id, id));
    return createMessage(result);
}
export async function getMessages(channel, options) {
    if (channel.guildID) {
        if (!botHasChannelPermissions(channel.id, [Permissions.VIEW_CHANNEL])) {
            throw new Error(Errors.MISSING_VIEW_CHANNEL);
        }
        if (!botHasChannelPermissions(channel.id, [Permissions.READ_MESSAGE_HISTORY])) {
            throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
        }
    }
    if (options?.limit && options.limit > 100)
        return;
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGES(channel.id), options));
    return result.map((res) => createMessage(res));
}
export async function getPins(channelID) {
    const result = (await RequestManager.get(endpoints.CHANNEL_PINS(channelID)));
    return result.map((res) => createMessage(res));
}
export async function sendMessage(channel, content) {
    if (typeof content === "string")
        content = { content };
    if (channel.guildID) {
        if (!botHasChannelPermissions(channel.id, [Permissions.SEND_MESSAGES])) {
            throw new Error(Errors.MISSING_SEND_MESSAGES);
        }
        if (content.tts &&
            !botHasChannelPermissions(channel.guildID, [Permissions.SEND_TTS_MESSAGES])) {
            throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
        }
    }
    if (content.content && content.content.length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    if (content.mentions) {
        if (content.mentions.users?.length) {
            if (content.mentions.parse.includes("users")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "users");
            }
            if (content.mentions.users.length > 100) {
                content.mentions.users = content.mentions.users.slice(0, 100);
            }
        }
        if (content.mentions.roles?.length) {
            if (content.mentions.parse.includes("roles")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "roles");
            }
            if (content.mentions.roles.length > 100) {
                content.mentions.roles = content.mentions.roles.slice(0, 100);
            }
        }
    }
    const result = await RequestManager.post(endpoints.CHANNEL_MESSAGES(channel.id), content);
    return createMessage(result);
}
export function deleteMessages(channel, ids, reason) {
    if (channel.guildID &&
        !botHasChannelPermissions(channel.id, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    if (ids.length < 2) {
        throw new Error(Errors.DELETE_MESSAGES_MIN);
    }
    if (ids.length > 100) {
        logYellow(`This endpoint only accepts a maximum of 100 messages. Deleting the first 100 message ids provided.`);
    }
    return RequestManager.post(endpoints.CHANNEL_BULK_DELETE(channel.id), {
        messages: ids.splice(0, 100),
        reason,
    });
}
export function getChannelInvites(channel) {
    if (channel.guildID &&
        !botHasChannelPermissions(channel.id, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    return RequestManager.get(endpoints.CHANNEL_INVITES(channel.id));
}
export function createInvite(channel, options) {
    if (channel.guildID &&
        !botHasChannelPermissions(channel.id, [Permissions.CREATE_INSTANT_INVITE])) {
        throw new Error(Errors.MISSING_CREATE_INSTANT_INVITE);
    }
    return RequestManager.post(endpoints.CHANNEL_INVITES(channel.id), options);
}
export function getChannelWebhooks(channel) {
    if (!botHasChannelPermissions(channel.id, [Permissions.MANAGE_WEBHOOKS])) {
        throw new Error(Errors.MISSING_MANAGE_WEBHOOKS);
    }
    return RequestManager.get(endpoints.CHANNEL_WEBHOOKS(channel.id));
}
const editChannelNameTopicQueue = new Map();
let editChannelProcessing = false;
function processEditChannelQueue() {
    if (!editChannelProcessing)
        return;
    const now = Date.now();
    editChannelNameTopicQueue.forEach((request) => {
        if (now > request.timestamp)
            return;
        if (!request.items.length) {
            return editChannelNameTopicQueue.delete(request.channelID);
        }
        request.amount = 0;
        const details = request.items.shift();
        if (!details)
            return;
        editChannel(details.channel, details.options);
        const secondDetails = request.items.shift();
        if (!secondDetails)
            return;
        return editChannel(secondDetails.channel, secondDetails.options);
    });
    if (editChannelNameTopicQueue.size) {
        setTimeout(() => processEditChannelQueue(), 600000);
    }
    else {
        editChannelProcessing = false;
    }
}
export function editChannel(channel, options) {
    if (!channel.guildID)
        throw new Error(Errors.CHANNEL_NOT_IN_GUILD);
    if (!botHasChannelPermissions(channel.id, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    if (options.name || options.topic) {
        const request = editChannelNameTopicQueue.get(channel.id);
        if (!request) {
            editChannelNameTopicQueue.set(channel.id, {
                channelID: channel.id,
                amount: 1,
                timestamp: Date.now() + 600000,
                items: [],
            });
        }
        else if (request.amount === 1) {
            request.amount = 2;
            request.timestamp = Date.now() + 600000;
        }
        else {
            request.items.push({ channel, options });
            if (editChannelProcessing)
                return;
            editChannelProcessing = true;
            processEditChannelQueue();
            return;
        }
    }
    const payload = {
        ...options,
        permission_overwrites: options.permission_overwrites?.map((overwrite) => {
            return {
                ...overwrite,
                allow: overwrite.allow.reduce((bits, perm) => bits |= Permissions[perm], 0),
                deny: overwrite.deny.reduce((bits, perm) => bits |= Permissions[perm], 0),
            };
        }),
    };
    return RequestManager.patch(endpoints.GUILD_CHANNEL(channel.id), payload);
}
//# sourceMappingURL=data:application/json;base64,