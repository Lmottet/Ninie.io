import { createMessage } from "../structures/message.ts";
import { delay } from "https://deno.land/std@0.61.0/async/delay.ts";
import { botID } from "../module/client.ts";
import { hasChannelPermission } from "./channel.ts";
import { Permissions } from "../types/permission.ts";
import { Errors } from "../types/errors.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
export async function deleteMessage(message, reason, delayMilliseconds = 0) {
    if (message.author.id !== botID) {
        if (!message.guildID ||
            !hasChannelPermission(message.channel, botID, [Permissions.MANAGE_MESSAGES])) {
            throw new Error(Errors.MISSING_MANAGE_MESSAGES);
        }
    }
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), { reason });
}
export function pin(message) {
    if (!botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.put(endpoints.CHANNEL_MESSAGE(message.channelID, message.id));
}
export function unpin(message) {
    if (!botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE(message.channelID, message.id));
}
export function addReaction(message, reaction) {
    RequestManager.put(endpoints.CHANNEL_MESSAGE_REACTION_ME(message.channelID, message.id, reaction));
}
export function removeReaction(message, reaction) {
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_ME(message.channelID, message.id, reaction));
}
export function removeAllReactions(message) {
    if (!botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTIONS(message.channelID, message.id));
}
export function removeReactionEmoji(message, reaction) {
    if (!botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION(message.channelID, message.id, reaction));
}
export async function getReactions(message, reaction) {
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGE_REACTION(message.channelID, message.id, reaction)));
    const guild = message.guild();
    return result.map((res) => {
        return guild?.members.get(res.id) || res;
    });
}
export async function editMessage(message, content) {
    if (message.author.id !== botID) {
        throw "You can only edit a message that was sent by the bot.";
    }
    if (typeof content === "string")
        content = { content };
    if (!botHasChannelPermissions(message.channelID, [Permissions.SEND_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    if (content.tts &&
        !botHasChannelPermissions(message.channelID, [Permissions.SEND_TTS_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    if (content.content && content.content.length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    const result = await RequestManager.patch(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), content);
    return createMessage(result);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFXLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU1uRSxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FDakMsT0FBZ0IsRUFDaEIsTUFBZSxFQUNmLGlCQUFpQixHQUFHLENBQUM7SUFFckIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUU7UUFFL0IsSUFDRSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ2hCLENBQUMsb0JBQW9CLENBQ25CLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsS0FBSyxFQUNMLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUM5QixFQUNEO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUNqRDtLQUNGO0lBRUQsSUFBSSxpQkFBaUI7UUFBRSxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXRELE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FDMUIsU0FBUyxDQUFDLGVBQWUsQ0FB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