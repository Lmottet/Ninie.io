import { ChannelTypes } from "../types/channel.ts";
import { structures } from "../structures/mod.ts";
import { eventHandlers } from "../module/client.ts";
import { cacheHandlers } from "./cache.ts";
export async function handleInternalChannelCreate(data) {
    if (data.t !== "CHANNEL_CREATE")
        return;
    const payload = data.d;
    const channel = await structures.createChannel(payload);
    await cacheHandlers.set("channels", channel.id, channel);
    if (channel.guildID) {
        const guild = await cacheHandlers.get("guilds", channel.guildID);
        guild?.channels.set(channel.id, channel);
    }
    eventHandlers.channelCreate?.(channel);
}
export async function handleInternalChannelDelete(data) {
    if (data.t !== "CHANNEL_DELETE")
        return;
    const payload = data.d;
    const cachedChannel = await cacheHandlers.get("channels", payload.id);
    if (!cachedChannel)
        return;
    if (cachedChannel.type === ChannelTypes.GUILD_VOICE && payload.guild_id) {
        const guild = await cacheHandlers.get("guilds", payload.guild_id);
        if (guild) {
            guild.voiceStates.forEach((vs, key) => {
                if (vs.channelID !== payload.id)
                    return;
                guild.voiceStates.delete(key);
                const member = guild.members.get(vs.userID);
                if (!member)
                    return;
                eventHandlers.voiceChannelLeave?.(member, vs.channelID);
            });
        }
        guild?.channels.delete(payload.id);
    }
    cacheHandlers.delete("channels", payload.id);
    cacheHandlers.forEach("messages", (message) => {
        if (message.channelID === payload.id) {
            cacheHandlers.delete("messages", message.id);
        }
    });
    eventHandlers.channelDelete?.(cachedChannel);
}
export async function handleInternalChannelUpdate(data) {
    if (data.t !== "CHANNEL_UPDATE")
        return;
    const payload = data.d;
    const cachedChannel = await cacheHandlers.get("channels", payload.id);
    const channel = await structures.createChannel(payload);
    cacheHandlers.set("channels", channel.id, channel);
    if (!cachedChannel)
        return;
    if (channel.guildID) {
        const guild = await cacheHandlers.get("guilds", channel.guildID);
        guild?.channels.set(channel.id, channel);
    }
    eventHandlers.channelUpdate?.(channel, cachedChannel);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsMkJBQTJCLENBQUMsSUFBb0I7SUFDcEUsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLGdCQUFnQjtRQUFFLE9BQU87SUFFeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQXlCLENBQUM7SUFDL0MsTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV6RCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsTUFBTSxLQUFLLEdBQUcsTUFBTSxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUMxQztJQUVELGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSwyQkFBMkIsQ0FBQyxJQUFvQjtJQUNwRSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssZ0JBQWdCO1FBQUUsT0FBTztJQUV4QyxNQUFNLE9BQU8sR0FBRyxJQUFJ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