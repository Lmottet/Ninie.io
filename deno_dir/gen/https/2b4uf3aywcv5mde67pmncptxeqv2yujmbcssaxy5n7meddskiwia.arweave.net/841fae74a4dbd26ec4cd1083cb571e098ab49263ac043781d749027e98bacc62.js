import { delay } from "../../deps.ts";
import { structures } from "../structures/mod.ts";
import { cacheHandlers } from "../controllers/cache.ts";
import { botID } from "../module/client.ts";
import { Permissions } from "../types/permission.ts";
import { Errors } from "../types/errors.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
export async function deleteMessageByID(channelID, messageID, reason, delayMilliseconds = 0) {
    const message = await cacheHandlers.get("messages", messageID);
    if (message)
        return deleteMessage(message, reason, delayMilliseconds);
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(channelID, messageID), { reason });
}
export async function deleteMessage(message, reason, delayMilliseconds = 0) {
    if (message.author.id !== botID) {
        if (!botHasChannelPermissions(message.channelID, [Permissions.MANAGE_MESSAGES])) {
            throw new Error(Errors.MISSING_MANAGE_MESSAGES);
        }
    }
    if (delayMilliseconds)
        await delay(delayMilliseconds);
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), { reason });
}
export function pin(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.put(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export function unpin(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    RequestManager.delete(endpoints.CHANNEL_MESSAGE(channelID, messageID));
}
export function addReaction(channelID, messageID, reaction) {
    if (!botHasChannelPermissions(channelID, [Permissions.ADD_REACTIONS])) {
        throw new Error(Errors.MISSING_ADD_REACTIONS);
    }
    if (!botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY])) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    if (reaction.startsWith("<:")) {
        reaction = reaction.substring(2, reaction.length - 1);
    }
    else if (reaction.startsWith("<a:")) {
        reaction = reaction.substring(3, reaction.length - 1);
    }
    return RequestManager.put(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export async function addReactions(channelID, messageID, reactions, ordered = false) {
    if (!ordered) {
        reactions.forEach((reaction) => addReaction(channelID, messageID, reaction));
    }
    else {
        for (const reaction of reactions) {
            await addReaction(channelID, messageID, reaction);
        }
    }
}
export function removeReaction(channelID, messageID, reaction) {
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_ME(channelID, messageID, reaction));
}
export function removeUserReaction(channelID, messageID, reaction, userID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION_USER(channelID, messageID, reaction, userID));
}
export function removeAllReactions(channelID, messageID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTIONS(channelID, messageID));
}
export function removeReactionEmoji(channelID, messageID, reaction) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    return RequestManager.delete(endpoints.CHANNEL_MESSAGE_REACTION(channelID, messageID, reaction));
}
export async function getReactions(message, reaction) {
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGE_REACTION(message.channelID, message.id, reaction)));
    const guild = await cacheHandlers.get("guilds", message.guildID);
    return result.map((res) => {
        return guild?.members.get(res.id) || res;
    });
}
export async function editMessage(message, content) {
    if (message.author.id !== botID) {
        throw "You can only edit a message that was sent by the bot.";
    }
    if (typeof content === "string")
        content = { content };
    if (!botHasChannelPermissions(message.channelID, [Permissions.SEND_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    if (content.tts &&
        !botHasChannelPermissions(message.channelID, [Permissions.SEND_TTS_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    if (content.content && content.content.length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    const result = await RequestManager.patch(endpoints.CHANNEL_MESSAGE(message.channelID, message.id), content);
    return structures.createMessage(result);
}
export async function publishMessage(channelID, messageID) {
    const data = await RequestManager.post(endpoints.CHANNEL_MESSAGE_CROSSPOST(channelID, messageID));
    return structures.createMessage(data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHbkUsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBZSxFQUNmLGlCQUFpQixHQUFHLENBQUM7SUFFckIsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvRCxJQUFJLE9BQU87UUFBRSxPQUFPLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFdEUsSUFBSSxpQkFBaUI7UUFBRSxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXRELE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FDMUIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQy9DLEVBQUUsTUFBTSxFQUFFLENBQ1gsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLENBQUMs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