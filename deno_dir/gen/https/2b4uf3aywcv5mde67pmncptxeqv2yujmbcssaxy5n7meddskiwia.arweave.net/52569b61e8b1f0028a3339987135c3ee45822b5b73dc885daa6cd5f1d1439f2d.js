import { ChannelTypes, } from "../types/channel.ts";
import { Collection } from "../utils/collection.ts";
import { urlToBase64 } from "../utils/utils.ts";
import { Intents } from "../types/options.ts";
import { identifyPayload } from "../module/client.ts";
import { requestAllMembers } from "../module/shardingManager.ts";
import { botHasPermission } from "../utils/permissions.ts";
import { RequestManager } from "../module/requestManager.ts";
import { endpoints } from "../constants/discord.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { structures } from "../structures/mod.ts";
import { cacheHandlers } from "../controllers/cache.ts";
import { formatImageURL } from "../utils/cdn.ts";
export function createServer(options) {
    return RequestManager.post(endpoints.GUILDS, options);
}
export function deleteServer(guildID) {
    return RequestManager.delete(endpoints.GUILD(guildID));
}
export function categoryChildrenIDs(guild, id) {
    return guild.channels.filter((channel) => channel.parentID === id);
}
export function guildIconURL(guild, size = 128, format) {
    return guild.icon
        ? formatImageURL(endpoints.GUILD_ICON(guild.id, guild.icon), size, format)
        : undefined;
}
export function guildSplashURL(guild, size = 128, format) {
    return guild.splash
        ? formatImageURL(endpoints.GUILD_SPLASH(guild.id, guild.splash), size, format)
        : undefined;
}
export function guildBannerURL(guild, size = 128, format) {
    return guild.banner
        ? formatImageURL(endpoints.GUILD_BANNER(guild.id, guild.banner), size, format)
        : undefined;
}
export async function createGuildChannel(guild, name, options) {
    if (!botHasPermission(guild.id, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    const result = (await RequestManager.post(endpoints.GUILD_CHANNELS(guild.id), {
        ...options,
        name,
        permission_overwrites: options?.permission_overwrites?.map((perm) => ({
            ...perm,
            allow: perm.allow.reduce((bits, p) => bits |= BigInt(Permissions[p]), BigInt(0)).toString(),
            deny: perm.deny.reduce((bits, p) => bits |= BigInt(Permissions[p]), BigInt(0)).toString(),
        })),
        type: options?.type || ChannelTypes.GUILD_TEXT,
    }));
    const channel = await structures.createChannel(result);
    guild.channels.set(result.id, channel);
    return channel;
}
export function deleteChannel(guildID, channelID, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    return RequestManager.delete(endpoints.CHANNEL(channelID), { reason });
}
export async function getChannels(guildID, addToCache = true) {
    const result = await RequestManager.get(endpoints.GUILD_CHANNELS(guildID));
    return Promise.all(result.map(async (res) => {
        const channel = await structures.createChannel(res, guildID);
        if (addToCache) {
            cacheHandlers.set("channels", channel.id, channel);
        }
        return channel;
    }));
}
export async function getChannel(channelID, addToCache = true) {
    const result = await RequestManager.get(endpoints.GUILD_CHANNEL(channelID));
    const channel = await structures.createChannel(result, result.guild_id);
    if (addToCache)
        cacheHandlers.set("channels", channel.id, channel);
    return channel;
}
export function swapChannels(guildID, channelPositions) {
    if (channelPositions.length < 2) {
        throw "You must provide atleast two channels to be swapped.";
    }
    return RequestManager.patch(endpoints.GUILD_CHANNELS(guildID), channelPositions);
}
export async function getMember(guildID, id) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return;
    const data = await RequestManager.get(endpoints.GUILD_MEMBER(guildID, id));
    const member = await structures.createMember(data, guild.id);
    guild.members.set(id, member);
    return member;
}
export async function getMembersByQuery(guildID, name, limit = 1) {
    const guild = await cacheHandlers.get("guilds", guildID);
    if (!guild)
        return;
    return new Promise((resolve) => {
        requestAllMembers(guild, resolve, { query: name, limit });
    });
}
export async function createEmoji(guildID, name, image, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    if (image && !image.startsWith("data:image/")) {
        image = await urlToBase64(image);
    }
    return RequestManager.post(endpoints.GUILD_EMOJIS(guildID), {
        ...options,
        name,
        image,
    });
}
export function editEmoji(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    return RequestManager.patch(endpoints.GUILD_EMOJI(guildID, id), {
        name: options.name,
        roles: options.roles,
    });
}
export function deleteEmoji(guildID, id, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_EMOJIS])) {
        throw new Error(Errors.MISSING_MANAGE_EMOJIS);
    }
    return RequestManager.delete(endpoints.GUILD_EMOJI(guildID, id), { reason });
}
export function emojiURL(id, animated = false) {
    return `https://cdn.discordapp.com/emojis/${id}.${animated ? "gif" : "png"}`;
}
export async function createGuildRole(guildID, options, reason) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    const result = await RequestManager.post(endpoints.GUILD_ROLES(guildID), {
        ...options,
        permissions: options.permissions
            ?.reduce((subtotal, perm) => {
            subtotal |= Permissions[perm];
            return subtotal;
        }, 0),
        reason,
    });
    const roleData = result;
    const role = await structures.createRole(roleData);
    const guild = await cacheHandlers.get("guilds", guildID);
    guild?.roles.set(role.id, role);
    return role;
}
export function editRole(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.patch(endpoints.GUILD_ROLE(guildID, id), options);
}
export function deleteRole(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.delete(endpoints.GUILD_ROLE(guildID, id));
}
export function getRoles(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.get(endpoints.GUILD_ROLES(guildID));
}
export function swapRoles(guildID, rolePositons) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_ROLES])) {
        throw new Error(Errors.MISSING_MANAGE_ROLES);
    }
    return RequestManager.patch(endpoints.GUILD_ROLES(guildID), rolePositons);
}
export async function getPruneCount(guildID, options) {
    if (options.days < 1) {
        throw new Error(Errors.PRUNE_MIN_DAYS);
    }
    if (!botHasPermission(guildID, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    const result = await RequestManager.get(endpoints.GUILD_PRUNE(guildID), { ...options, include_roles: options.roles.join(",") });
    return result.pruned;
}
export function pruneMembers(guildID, options) {
    if (options.days < 1) {
        throw new Error(Errors.PRUNE_MIN_DAYS);
    }
    if (!botHasPermission(guildID, [Permissions.KICK_MEMBERS])) {
        throw new Error(Errors.MISSING_KICK_MEMBERS);
    }
    RequestManager.post(endpoints.GUILD_PRUNE(guildID), { ...options, include_roles: options.roles.join(",") });
}
export function fetchMembers(guild, options) {
    if (!(identifyPayload.intents & Intents.GUILD_MEMBERS)) {
        throw new Error(Errors.MISSING_INTENT_GUILD_MEMBERS);
    }
    return new Promise((resolve) => {
        requestAllMembers(guild, resolve, options);
    });
}
export function getAuditLogs(guildID, options) {
    if (!botHasPermission(guildID, [Permissions.VIEW_AUDIT_LOG])) {
        throw new Error(Errors.MISSING_VIEW_AUDIT_LOG);
    }
    return RequestManager.get(endpoints.GUILD_AUDIT_LOGS(guildID), {
        ...options,
        limit: options.limit && options.limit >= 1 && options.limit <= 100
            ? options.limit
            : 50,
    });
}
export function getEmbed(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_EMBED(guildID));
}
export function editEmbed(guildID, enabled, channelID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.patch(endpoints.GUILD_EMBED(guildID), { enabled, channel_id: channelID });
}
export function getVanityURL(guildID) {
    return RequestManager.get(endpoints.GUILD_VANITY_URL(guildID));
}
export function getIntegrations(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_INTEGRATIONS(guildID));
}
export function editIntegration(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.patch(endpoints.GUILD_INTEGRATION(guildID, id), options);
}
export function deleteIntegration(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.delete(endpoints.GUILD_INTEGRATION(guildID, id));
}
export function syncIntegration(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.post(endpoints.GUILD_INTEGRATION_SYNC(guildID, id));
}
export async function getBans(guildID) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    const results = await RequestManager.get(endpoints.GUILD_BANS(guildID));
    return new Collection(results.map((res) => [res.user.id, res]));
}
export function getBan(guildID, memberID) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.get(endpoints.GUILD_BAN(guildID, memberID));
}
export function ban(guildID, id, options) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.put(endpoints.GUILD_BAN(guildID, id), { ...options, delete_message_days: options.days });
}
export function unban(guildID, id) {
    if (!botHasPermission(guildID, [Permissions.BAN_MEMBERS])) {
        throw new Error(Errors.MISSING_BAN_MEMBERS);
    }
    return RequestManager.delete(endpoints.GUILD_BAN(guildID, id));
}
export async function editGuild(guildID, options) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    if (options.icon && !options.icon.startsWith("data:image/")) {
        options.icon = await urlToBase64(options.icon);
    }
    if (options.banner && !options.banner.startsWith("data:image/")) {
        options.banner = await urlToBase64(options.banner);
    }
    if (options.splash && !options.splash.startsWith("data:image/")) {
        options.splash = await urlToBase64(options.splash);
    }
    return RequestManager.patch(endpoints.GUILD(guildID), options);
}
export function getInvites(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_GUILD])) {
        throw new Error(Errors.MISSING_MANAGE_GUILD);
    }
    return RequestManager.get(endpoints.GUILD_INVITES(guildID));
}
export function leaveGuild(guildID) {
    return RequestManager.delete(endpoints.GUILD_LEAVE(guildID));
}
export function getVoiceRegions(guildID) {
    return RequestManager.get(endpoints.GUILD_REGIONS(guildID));
}
export function getWebhooks(guildID) {
    if (!botHasPermission(guildID, [Permissions.MANAGE_WEBHOOKS])) {
        throw new Error(Errors.MISSING_MANAGE_WEBHOOKS);
    }
    return RequestManager.get(endpoints.GUILD_WEBHOOKS(guildID));
}
export function getUser(userID) {
    return RequestManager.get(endpoints.USER(userID));
}
//# sourceMappingURL=data:application/json;base64,