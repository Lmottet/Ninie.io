import { eventHandlers } from "../module/client.ts";
import { structures } from "../structures/mod.ts";
import { cache } from "../utils/cache.ts";
import { cacheHandlers } from "./cache.ts";
export async function handleInternalGuildMemberAdd(data) {
    if (data.t !== "GUILD_MEMBER_ADD")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    guild.memberCount++;
    const member = await structures.createMember(payload, guild.id);
    guild.members.set(payload.user.id, member);
    eventHandlers.guildMemberAdd?.(guild, member);
}
export async function handleInternalGuildMemberRemove(data) {
    if (data.t !== "GUILD_MEMBER_REMOVE")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    guild.memberCount--;
    const member = guild.members.get(payload.user.id);
    eventHandlers.guildMemberRemove?.(guild, member || payload.user);
    eventHandlers.guildMemberRemove?.(guild, member || payload.user);
    guild.members.delete(payload.user.id);
}
export async function handleInternalGuildMemberUpdate(data) {
    if (data.t !== "GUILD_MEMBER_UPDATE")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    const cachedMember = guild.members.get(payload.user.id);
    const newMemberData = {
        ...payload,
        premium_since: payload.premium_since || undefined,
        joined_at: new Date(cachedMember?.joinedAt || Date.now())
            .toISOString(),
        deaf: cachedMember?.deaf || false,
        mute: cachedMember?.mute || false,
    };
    const member = await structures.createMember(newMemberData, guild.id);
    guild.members.set(payload.user.id, member);
    if (cachedMember?.nick !== payload.nick) {
        eventHandlers.nicknameUpdate?.(guild, member, payload.nick, cachedMember?.nick);
    }
    const roleIDs = cachedMember?.roles || [];
    roleIDs.forEach((id) => {
        if (!payload.roles.includes(id)) {
            eventHandlers.roleLost?.(guild, member, id);
        }
    });
    payload.roles.forEach((id) => {
        if (!roleIDs.includes(id)) {
            eventHandlers.roleGained?.(guild, member, id);
        }
    });
    eventHandlers.guildMemberUpdate?.(guild, member, cachedMember);
}
export async function handleInternalGuildMembersChunk(data) {
    if (data.t !== "GUILD_MEMBERS_CHUNK")
        return;
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", payload.guild_id);
    if (!guild)
        return;
    payload.members.forEach(async (member) => {
        guild.members.set(member.user.id, await structures.createMember(member, guild.id));
    });
    if (payload.nonce) {
        const resolve = cache.fetchAllMembersProcessingRequests.get(payload.nonce);
        if (!resolve)
            return;
        if (payload.chunk_index + 1 === payload.chunk_count) {
            cache.fetchAllMembersProcessingRequests.delete(payload.nonce);
            resolve(guild.members);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lbWJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUzQyxNQUFNLENBQUMsS0FBSyxVQUFVLDRCQUE0QixDQUFDLElBQW9CO0lBQ3JFLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxrQkFBa0I7UUFBRSxPQUFPO0lBRTFDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUEwQixDQUFDO0lBQ2hELE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xFLElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTztJQUVuQixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsWUFBWSxDQUMxQyxPQUFPLEVBQ1AsS0FBSyxDQUFDLEVBQUUsQ0FDVCxDQUFDO0lBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFM0MsYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSwrQkFBK0IsQ0FBQyxJQUFvQjtJQUN4RSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUsscUJBQXFCO1FBQUUsT0FBTztJQUU3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBb0Is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