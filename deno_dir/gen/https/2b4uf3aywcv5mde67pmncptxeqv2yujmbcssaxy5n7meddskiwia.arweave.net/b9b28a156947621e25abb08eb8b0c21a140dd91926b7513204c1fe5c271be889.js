import { endpoints } from "../constants/discord.ts";
import { RequestManager } from "../module/requestManager.ts";
import { Errors } from "../types/errors.ts";
import { Permissions } from "../types/permission.ts";
import { botHasChannelPermissions } from "../utils/permissions.ts";
import { structures } from "../structures/mod.ts";
export function channelOverwriteHasPermission(guildID, id, overwrites, permissions) {
    const overwrite = overwrites.find((perm) => perm.id === id) ||
        overwrites.find((perm) => perm.id === guildID);
    return permissions.every((perm) => {
        if (overwrite) {
            if (BigInt(overwrite.deny) & BigInt(perm))
                return false;
            if (BigInt(overwrite.allow) & BigInt(perm))
                return true;
        }
        return false;
    });
}
export async function getMessage(channelID, id) {
    if (!botHasChannelPermissions(channelID, [Permissions.VIEW_CHANNEL])) {
        throw new Error(Errors.MISSING_VIEW_CHANNEL);
    }
    if (!botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY])) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    const result = await RequestManager.get(endpoints.CHANNEL_MESSAGE(channelID, id));
    return structures.createMessage(result);
}
export async function getMessages(channelID, options) {
    if (!botHasChannelPermissions(channelID, [Permissions.VIEW_CHANNEL])) {
        throw new Error(Errors.MISSING_VIEW_CHANNEL);
    }
    if (!botHasChannelPermissions(channelID, [Permissions.READ_MESSAGE_HISTORY])) {
        throw new Error(Errors.MISSING_READ_MESSAGE_HISTORY);
    }
    if (options?.limit && options.limit > 100)
        return;
    const result = (await RequestManager.get(endpoints.CHANNEL_MESSAGES(channelID), options));
    return Promise.all(result.map((res) => structures.createMessage(res)));
}
export async function getPins(channelID) {
    const result = (await RequestManager.get(endpoints.CHANNEL_PINS(channelID)));
    return Promise.all(result.map((res) => structures.createMessage(res)));
}
export async function sendMessage(channelID, content) {
    if (typeof content === "string")
        content = { content };
    if (!botHasChannelPermissions(channelID, [Permissions.SEND_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_MESSAGES);
    }
    if (content.tts &&
        !botHasChannelPermissions(channelID, [Permissions.SEND_TTS_MESSAGES])) {
        throw new Error(Errors.MISSING_SEND_TTS_MESSAGE);
    }
    if (content.embed &&
        !botHasChannelPermissions(channelID, [Permissions.EMBED_LINKS])) {
        throw new Error(Errors.MISSING_EMBED_LINKS);
    }
    if (content.content && [...content.content].length > 2000) {
        throw new Error(Errors.MESSAGE_MAX_LENGTH);
    }
    if (content.mentions) {
        if (content.mentions.users?.length) {
            if (content.mentions.parse?.includes("users")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "users");
            }
            if (content.mentions.users.length > 100) {
                content.mentions.users = content.mentions.users.slice(0, 100);
            }
        }
        if (content.mentions.roles?.length) {
            if (content.mentions.parse?.includes("roles")) {
                content.mentions.parse = content.mentions.parse.filter((p) => p !== "roles");
            }
            if (content.mentions.roles.length > 100) {
                content.mentions.roles = content.mentions.roles.slice(0, 100);
            }
        }
    }
    const result = await RequestManager.post(endpoints.CHANNEL_MESSAGES(channelID), {
        ...content,
        allowed_mentions: content.mentions,
    });
    return structures.createMessage(result);
}
export function deleteMessages(channelID, ids, reason) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_MESSAGES])) {
        throw new Error(Errors.MISSING_MANAGE_MESSAGES);
    }
    if (ids.length < 2) {
        throw new Error(Errors.DELETE_MESSAGES_MIN);
    }
    if (ids.length > 100) {
        console.warn(`This endpoint only accepts a maximum of 100 messages. Deleting the first 100 message ids provided.`);
    }
    return RequestManager.post(endpoints.CHANNEL_BULK_DELETE(channelID), {
        messages: ids.splice(0, 100),
        reason,
    });
}
export function getChannelInvites(channelID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    return RequestManager.get(endpoints.CHANNEL_INVITES(channelID));
}
export function createInvite(channelID, options) {
    if (!botHasChannelPermissions(channelID, [Permissions.CREATE_INSTANT_INVITE])) {
        throw new Error(Errors.MISSING_CREATE_INSTANT_INVITE);
    }
    return RequestManager.post(endpoints.CHANNEL_INVITES(channelID), options);
}
export function getChannelWebhooks(channelID) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_WEBHOOKS])) {
        throw new Error(Errors.MISSING_MANAGE_WEBHOOKS);
    }
    return RequestManager.get(endpoints.CHANNEL_WEBHOOKS(channelID));
}
const editChannelNameTopicQueue = new Map();
let editChannelProcessing = false;
function processEditChannelQueue() {
    if (!editChannelProcessing)
        return;
    const now = Date.now();
    editChannelNameTopicQueue.forEach((request) => {
        if (now > request.timestamp)
            return;
        if (!request.items.length) {
            return editChannelNameTopicQueue.delete(request.channelID);
        }
        request.amount = 0;
        const details = request.items.shift();
        if (!details)
            return;
        editChannel(details.channelID, details.options);
        const secondDetails = request.items.shift();
        if (!secondDetails)
            return;
        return editChannel(secondDetails.channelID, secondDetails.options);
    });
    if (editChannelNameTopicQueue.size) {
        setTimeout(() => processEditChannelQueue(), 600000);
    }
    else {
        editChannelProcessing = false;
    }
}
export function editChannel(channelID, options) {
    if (!botHasChannelPermissions(channelID, [Permissions.MANAGE_CHANNELS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    if (options.name || options.topic) {
        const request = editChannelNameTopicQueue.get(channelID);
        if (!request) {
            editChannelNameTopicQueue.set(channelID, {
                channelID: channelID,
                amount: 1,
                timestamp: Date.now() + 600000,
                items: [],
            });
        }
        else if (request.amount === 1) {
            request.amount = 2;
            request.timestamp = Date.now() + 600000;
        }
        else {
            request.items.push({ channelID, options });
            if (editChannelProcessing)
                return;
            editChannelProcessing = true;
            processEditChannelQueue();
            return;
        }
    }
    const payload = {
        ...options,
        rate_limit_per_user: options.slowmode,
        parent_id: options.parentID,
        user_limit: options.userLimit,
        permission_overwrites: options.overwrites?.map((overwrite) => {
            return {
                ...overwrite,
                allow: overwrite.allow.reduce((bits, perm) => bits |= BigInt(Permissions[perm]), BigInt(0)).toString(),
                deny: overwrite.deny.reduce((bits, perm) => bits |= BigInt(Permissions[perm]), BigInt(0)).toString(),
            };
        }),
    };
    return RequestManager.patch(endpoints.GUILD_CHANNEL(channelID), payload);
}
export async function followChannel(sourceChannelID, targetChannelID) {
    if (!botHasChannelPermissions(targetChannelID, [Permissions.MANAGE_WEBHOOKS])) {
        throw new Error(Errors.MISSING_MANAGE_CHANNELS);
    }
    const data = await RequestManager.post(endpoints.CHANNEL_FOLLOW(sourceChannelID), {
        webhook_channel_id: targetChannelID,
    });
    return data.webhook_id;
}
//# sourceMappingURL=data:application/json;base64,